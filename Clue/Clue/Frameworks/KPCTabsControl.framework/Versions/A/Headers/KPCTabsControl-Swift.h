// Generated by Apple Swift version 3.0.2 (swiftlang-800.0.63 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import CoreGraphics;
@import Foundation;
@import AppKit;
#endif

//#import "/Users/Ahmed/Desktop/KPCTabsControl-swift-3/KPCTabsControl/KPCTabsControl-Bridging-Header.h"
typedef NS_OPTIONS(NSInteger, BorderMask) {
    BorderMaskNone = 0,
    BorderMaskTop = 1 << 0,
    BorderMaskLeft = 1 << 1,
    BorderMaskRight = 1 << 2,
    BorderMaskBottom = 1 << 3
};

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
enum TabWidth : NSInteger;
enum TabPosition : NSInteger;
@class IconFrames;
@class NSAttributedString;
@class TitleEditorSettings;
enum TabSelectionState : NSInteger;

/**
  The Style protocol defines all the necessary things to let KPCTabsControl draw itself with tabs.
*/
SWIFT_PROTOCOL("_TtP14KPCTabsControl5Style_")
@protocol Style
@property (nonatomic, readonly) enum TabWidth tabButtonWidth;
@property (nonatomic, readonly) CGFloat tabButtonFlexibleMinWidth;
@property (nonatomic, readonly) CGFloat tabButtonFlexibleMaxWidth;
- (NSPoint)tabButtonOffsetWithPosition:(enum TabPosition)position;
- (BorderMask)tabButtonBorderMask:(enum TabPosition)position;
- (IconFrames * _Nonnull)iconFramesWithTabRect:(NSRect)rect;
- (NSRect)titleRectWithTitle:(NSAttributedString * _Nonnull)title inBounds:(NSRect)rect showingIcon:(BOOL)showingIcon;
- (TitleEditorSettings * _Nonnull)titleEditorSettings;
- (NSAttributedString * _Nonnull)attributedTitleWithContent:(NSString * _Nonnull)content selectionState:(enum TabSelectionState)selectionState;
@property (nonatomic, readonly) CGFloat tabsControlRecommendedHeight;
- (BorderMask)tabsControlBorderMask;
- (void)drawTabButtonBezelWithFrame:(NSRect)frame position:(enum TabPosition)position isSelected:(BOOL)isSelected;
- (void)drawTabsControlBezelWithFrame:(NSRect)frame;
@end

@protocol Theme;

/**
  The default Style protocol doesn’t necessary have a theme associated with it, for custom styles.
  However, provided styles (Numbers.app-like, Safari and Chrome) have an associated theme.
*/
SWIFT_CLASS("_TtC14KPCTabsControl11ThemedStyle")
@interface ThemedStyle : NSObject <Style>
@property (nonatomic, strong) id <Theme> _Nonnull theme;
@property (nonatomic) CGFloat tabsControlRecommendedHeight;
@property (nonatomic) CGFloat tabButtonFlexibleMaxWidth;
@property (nonatomic) CGFloat tabButtonFlexibleMinWidth;
@property (nonatomic) enum TabWidth tabButtonWidth;
- (nonnull instancetype)init:(id <Theme> _Nonnull)theme OBJC_DESIGNATED_INITIALIZER;
- (NSPoint)tabButtonOffsetWithPosition:(enum TabPosition)position;
- (BorderMask)tabButtonBorderMask:(enum TabPosition)position;
- (IconFrames * _Nonnull)iconFramesWithTabRect:(NSRect)rect;
- (NSRect)titleRectWithTitle:(NSAttributedString * _Nonnull)title inBounds:(NSRect)rect showingIcon:(BOOL)showingIcon;
- (TitleEditorSettings * _Nonnull)titleEditorSettings;
- (NSAttributedString * _Nonnull)attributedTitleWithContent:(NSString * _Nonnull)content selectionState:(enum TabSelectionState)selectionState;
- (BorderMask)tabsControlBorderMask;
- (void)drawTabsControlBezelWithFrame:(NSRect)frame;
- (void)drawTabButtonBezelWithFrame:(NSRect)frame position:(enum TabPosition)position isSelected:(BOOL)isSelected;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC14KPCTabsControl11ChromeStyle")
@interface ChromeStyle : ThemedStyle
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (IconFrames * _Nonnull)iconFramesWithTabRect:(NSRect)rect;
- (NSRect)titleRectWithTitle:(NSAttributedString * _Nonnull)title inBounds:(NSRect)rect showingIcon:(BOOL)showingIcon;
- (TitleEditorSettings * _Nonnull)titleEditorSettings;
- (NSAttributedString * _Nonnull)attributedTitleWithContent:(NSString * _Nonnull)content selectionState:(enum TabSelectionState)selectionState;
- (void)drawTabButtonBezelWithFrame:(NSRect)frame position:(enum TabPosition)position isSelected:(BOOL)isSelected;
- (void)drawTabsControlBezelWithFrame:(NSRect)frame;
- (NSPoint)tabButtonOffsetWithPosition:(enum TabPosition)position;
- (nonnull instancetype)init:(id <Theme> _Nonnull)theme SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC14KPCTabsControl9ClueStyle")
@interface ClueStyle : ThemedStyle
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (IconFrames * _Nonnull)iconFramesWithTabRect:(NSRect)rect;
- (nonnull instancetype)init:(id <Theme> _Nonnull)theme SWIFT_UNAVAILABLE;
@end


/**
  The default TabsControl style. Used with the DefaultTheme, it provides an experience similar to Apple’s Numbers.app.
*/
SWIFT_CLASS("_TtC14KPCTabsControl12DefaultStyle")
@interface DefaultStyle : ThemedStyle
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithTabButtonWidth:(enum TabWidth)tabButtonWidth OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(id <Theme> _Nonnull)theme SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC14KPCTabsControl10IconFrames")
@interface IconFrames : NSObject
- (nonnull instancetype)init:(NSRect)iconFrame alternativeTitleIconFrame:(NSRect)alternativeTitleIconFrame OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) NSRect iconFrame;
@property (nonatomic) NSRect alternativeTitleIconFrame;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC14KPCTabsControl18MessageInterceptor")
@interface MessageInterceptor : NSObject
@property (nonatomic, strong) NSObject * _Nullable receiver;
@property (nonatomic, strong) NSObject * _Nullable middleMan;
- (id _Nullable)forwardingTargetForSelector:(SEL _Nonnull)aSelector;
- (BOOL)respondsToSelector:(SEL _Nonnull)aSelector;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface NSButton (SWIFT_EXTENSION(KPCTabsControl))
+ (NSButton * _Nonnull)auxiliaryButtonWithImageNamed:(NSString * _Nonnull)imageName target:(id _Nullable)target action:(SEL _Nullable)action;
@end


@interface NSColor (SWIFT_EXTENSION(KPCTabsControl))
- (NSColor * _Nonnull)darkerColor;
@end


@interface NSImage (SWIFT_EXTENSION(KPCTabsControl))
- (NSImage * _Nonnull)imageWithTint:(NSColor * _Nonnull)tint;
@end


/**
  The Safari style. Use mostly the default implementation of Style.
*/
SWIFT_CLASS("_TtC14KPCTabsControl11SafariStyle")
@interface SafariStyle : ThemedStyle
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (IconFrames * _Nonnull)iconFramesWithTabRect:(NSRect)rect;
- (nonnull instancetype)init:(id <Theme> _Nonnull)theme SWIFT_UNAVAILABLE;
@end


@class NSCoder;
@class NSMenu;
@class NSEvent;
@class NSText;
@protocol NSTextDelegate;

SWIFT_CLASS("_TtC14KPCTabsControl9TabButton")
@interface TabButton : NSButton
@property (nonatomic, strong) id _Nullable item;
@property (nonatomic, strong) id <Style> _Null_unspecified style;
@property (nonatomic, strong) id _Nullable representedObject;
@property (nonatomic) BOOL editable;
@property (nonatomic, strong) NSImage * _Nullable icon;
@property (nonatomic, strong) NSImage * _Nullable alternativeTitleIcon;
- (nonnull instancetype)initWithFrame:(NSRect)frameRect OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIndex:(NSInteger)index item:(id _Nonnull)item target:(id _Nullable)target action:(SEL _Nonnull)action style:(id <Style> _Nonnull)style OBJC_DESIGNATED_INITIALIZER;
- (id _Nonnull)copy;
@property (nonatomic, strong) NSMenu * _Nullable menu;
- (void)updateTrackingAreas;
- (void)mouseEntered:(NSEvent * _Nonnull)theEvent;
- (void)mouseExited:(NSEvent * _Nonnull)theEvent;
- (void)mouseDown:(NSEvent * _Nonnull)theEvent;
- (void)resetCursorRects;
- (void)drawRect:(NSRect)dirtyRect;
- (void)editWithFieldEditor:(NSText * _Nonnull)fieldEditor delegate:(id <NSTextDelegate> _Nonnull)delegate;
- (void)finishEditingWithFieldEditor:(NSText * _Nonnull)fieldEditor newValue:(NSString * _Nonnull)newValue;
@end

@class NSView;

SWIFT_CLASS("_TtC14KPCTabsControl13TabButtonCell")
@interface TabButtonCell : NSButtonCell
@property (nonatomic) BOOL hasTitleAlternativeIcon;
@property (nonatomic, readonly) BOOL isSelected;
@property (nonatomic, readonly) enum TabSelectionState selectionState;
@property (nonatomic, readonly) BOOL showsIcon;
@property (nonatomic, readonly) BOOL showsMenu;
@property (nonatomic) enum TabPosition buttonPosition;
@property (nonatomic, strong) id <Style> _Null_unspecified style;
- (nonnull instancetype)initTextCell:(NSString * _Nonnull)aString OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (id _Nonnull)copy;
+ (NSImage * _Nonnull)popupImage;
- (BOOL)hasRoomToDrawFullTitleInRect:(NSRect)rect;
- (NSSize)cellSizeForBounds:(NSRect)aRect;
- (BOOL)trackMouse:(NSEvent * _Nonnull)theEvent inRect:(NSRect)cellFrame ofView:(NSView * _Nonnull)controlView untilMouseUp:(BOOL)flag;
- (NSRect)titleRectForBounds:(NSRect)theRect;
- (void)editWithFieldEditor:(NSText * _Nonnull)fieldEditor inView:(NSView * _Nonnull)view delegate:(id <NSTextDelegate> _Nonnull)delegate;
- (void)finishEditingWithFieldEditor:(NSText * _Nonnull)fieldEditor newValue:(NSString * _Nonnull)newValue;
- (NSRect)editingRectForBounds:(NSRect)rect;
- (void)drawWithFrame:(NSRect)frame inView:(NSView * _Nonnull)controlView;
- (NSRect)drawTitle:(NSAttributedString * _Nonnull)title withFrame:(NSRect)frame inView:(NSView * _Nonnull)controlView;
- (nonnull instancetype)initImageCell:(NSImage * _Nullable)image SWIFT_UNAVAILABLE;
@end

@class NSFont;

/**
  The theme of a single Tab button
*/
SWIFT_PROTOCOL("_TtP14KPCTabsControl14TabButtonTheme_")
@protocol TabButtonTheme
@property (nonatomic, readonly, strong) NSColor * _Nonnull backgroundColor;
@property (nonatomic, readonly, strong) NSColor * _Nonnull borderColor;
@property (nonatomic, readonly, strong) NSColor * _Nonnull titleColor;
@property (nonatomic, readonly, strong) NSFont * _Nonnull titleFont;
@end

/**
  The position of a tab button inside the control. Used in the Style.
  <ul>
    <li>
      first:  The most left-hand tab button.
    </li>
    <li>
      middle: Any middle tab button between first and last.
    </li>
    <li>
      last:   The most right-hand tab button
    </li>
  </ul>
*/
typedef SWIFT_ENUM(NSInteger, TabPosition) {
  TabPositionFirst = 0,
  TabPositionMiddle = 1,
  TabPositionLast = 2,
};

/**
  The tab selection state.
  <ul>
    <li>
      Normal:       The tab is not selected.
    </li>
    <li>
      Selected:     The tab is selected.
    </li>
    <li>
      Unselectable: The tab is not selectable.
    </li>
  </ul>
*/
typedef SWIFT_ENUM(NSInteger, TabSelectionState) {
  TabSelectionStateNormal = 0,
  TabSelectionStateSelected = 1,
  TabSelectionStateUnselectable = 2,
};

/**
  The tab width modes.
  <ul>
    <li>
      Full:     The tab widths will be equally distributed accross the tabs control width.
    </li>
    <li>
      Flexible: The tab widths will be adjusted between min and max, depending on the tabs control width.
    </li>
  </ul>
*/
typedef SWIFT_ENUM(NSInteger, TabWidth) {
  TabWidthFull = 0,
  TabWidthFlexible = 1,
};

@protocol TabsControlDelegate;
@protocol TabsControlDataSource;

/**
  TabsControl is the main class of the library, and is designed to suffice for implementing tabs in your app.
  The only necessary thing for it to work is an implementation of its \code
  dataSource
  \endcode.
*/
SWIFT_CLASS("_TtC14KPCTabsControl11TabsControl")
@interface TabsControl : NSControl <NSTextDelegate>
/**
  The dataSource of the tabs control, providing all the necessary information for the class to build the tabs.
*/
@property (nonatomic, weak) IBOutlet id <TabsControlDataSource> _Nullable dataSource;
/**
  The delegate of the tabs control, providing additional possibilities for customization and precise behavior.
*/
@property (nonatomic, weak) IBOutlet id <TabsControlDelegate> _Nullable delegate;
@property (nonatomic, strong) id <Style> _Nonnull style;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(NSRect)frameRect OBJC_DESIGNATED_INITIALIZER;
- (NSMenu * _Nullable)menuForEvent:(NSEvent * _Nonnull)event;
/**
  Reloads all tabs of the tabs control. Used when the \code
  dataSource
  \endcode has changed for instance.
*/
- (void)reloadTabs;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
/**
  Select an item at a given index. Selecting an invalid index will unselected all tabs.
  \param index An integer indicating the index of the item to be selected.

*/
- (void)selectItemAtIndex:(NSInteger)index;
/**
  Starts editing the tab as if the user double-clicked on it. If \code
  index
  \endcode is out of bounds, it does nothing.
*/
- (void)editTabAtIndex:(NSInteger)index;
- (void)editTabButton:(TabButton * _Nonnull)tab;
- (void)textDidEndEditing:(NSNotification * _Nonnull)notification;
@property (nonatomic, readonly) BOOL isOpaque;
@property (nonatomic, readonly) BOOL isFlipped;
- (CGFloat)currentTabWidth;
- (void)encodeRestorableStateWithCoder:(NSCoder * _Nonnull)coder;
- (void)restoreStateWithCoder:(NSCoder * _Nonnull)coder;
@end


SWIFT_CLASS("_TtC14KPCTabsControl15TabsControlCell")
@interface TabsControlCell : NSCell
@property (nonatomic, strong) id <Style> _Null_unspecified style;
- (nonnull instancetype)initTextCell:(NSString * _Nonnull)aString OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (NSSize)cellSizeForBounds:(NSRect)aRect;
- (void)drawWithFrame:(NSRect)cellFrame inView:(NSView * _Nonnull)controlView;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
- (nonnull instancetype)initImageCell:(NSImage * _Nullable)image SWIFT_UNAVAILABLE;
@end


SWIFT_PROTOCOL("_TtP14KPCTabsControl21TabsControlDataSource_")
@protocol TabsControlDataSource <NSObject>
/**
  Returns the number of tabs
  \param control The instance of the tabs control.


  returns:
  A unsigned integer indicating the number of tabs to display.
*/
- (NSInteger)tabsControlNumberOfTabs:(TabsControl * _Nonnull)control;
/**
  Return the item for the tab at the given index, similarly to a “representedObject” in a cell view.
  \param control The instance of the tabs control.

  \param index The index of the given item.


  returns:
  An instance of an object representing the tab.
*/
- (id _Nonnull)tabsControl:(TabsControl * _Nonnull)control itemAtIndex:(NSInteger)index;
/**
  Return the title for the tab of the given item
  \param control The instance of the tabs control.

  \param item The item representing the given tab.


  returns:
  A string to be used as title of the tab.
*/
- (NSString * _Nonnull)tabsControl:(TabsControl * _Nonnull)control titleForItem:(id _Nonnull)item;
@optional
/**
  If any, returns a menu for the tab, to be place to the right side of it. It is your responsability to fully
  configure its targets and actions before returning it to the tabs control.
  \param control The instance of the tabs control.

  \param item The item representing the given tab.


  returns:
  A menu instance.
*/
- (NSMenu * _Nullable)tabsControl:(TabsControl * _Nonnull)control menuForItem:(id _Nonnull)item;
/**
  If any, returns an icon for the tab, to be placed to the left side of it.
  \param control The instance of the tabs control.

  \param item The item representing the given tab.


  returns:
  An image instance for the icon.
*/
- (NSImage * _Nullable)tabsControl:(TabsControl * _Nonnull)control iconForItem:(id _Nonnull)item;
/**
  If the width of the tab is not large enough to draw the title, it is possible to provide here an alternate
  icon to replace it. The threshold at which one switch between the title and the icon is computed individually
  for each title.
  \param control The instance of the tabs control.

  \param item The item representing the given tab.


  returns:
  An image instance for the alternate icon.
*/
- (NSImage * _Nullable)tabsControl:(TabsControl * _Nonnull)control titleAlternativeIconForItem:(id _Nonnull)item;
@end


SWIFT_PROTOCOL("_TtP14KPCTabsControl19TabsControlDelegate_")
@protocol TabsControlDelegate <NSControlTextEditingDelegate>
@optional
/**
  Determine if the tab can be selected.
  \param tabControl The instance of the tabs control.

  \param item The item representing the given tab.


  returns:
  A boolean value indicating whether the tab can be selected or not.
*/
- (BOOL)tabsControl:(TabsControl * _Nonnull)control canSelectItem:(id _Nonnull)item;
/**
  If implemented, the delegate is informed that the selected tab did change.
  See also TabsControlSelectionDidChangeNotification
  \param tabControl The instance of the tabs control.

  \param item The item representing the selected tab.

*/
- (void)tabsControlDidChangeSelection:(TabsControl * _Nonnull)control item:(id _Nonnull)item;
/**
  Return \code
  true
  \endcode if the tab is allowed to be reordered (by being dragged with the mouse).
  This method has no effect if the one below is not implemented.
  \param tabControl The instance of the tabs control.

  \param item The item representing the given tab.


  returns:
  A boolean value indicating whether the tab can be reordered or not.
*/
- (BOOL)tabsControl:(TabsControl * _Nonnull)control canReorderItem:(id _Nonnull)item;
/**
  If implemented, the delegate is informed that the tabs have been reordered. It is the delegate responsability
  to store the new order of items. If not stored, the tabs will recover their original order.
  \param tabControl The instance of the tabs control.

  \param items The array the items following the new orders.

*/
- (void)tabsControl:(TabsControl * _Nonnull)control didReorderItems:(NSArray * _Nonnull)items;
/**
  Return \code
  true
  \endcode if you allow the editing of the title of the tab. By default, titles are not editable.
  This method has no effect if the one below is not implemented.
  \param tabControl The instance of the tabs control.

  \param item The item representing the given tab.


  returns:
  A boolean value indicating whether the tab title can be edited or not.
*/
- (BOOL)tabsControl:(TabsControl * _Nonnull)control canEditTitleOfItem:(id _Nonnull)item;
/**
  If implemented, the delegate is informed that the tab has been renamed to the given title. Again, it is the
  delegate responsability to store the new title.
  \param tabControl The instance of the tabs control.

  \param newTitle The new title value.

  \param item The item representing the given tab.

*/
- (void)tabsControl:(TabsControl * _Nonnull)control setTitle:(NSString * _Nonnull)newTitle forItem:(id _Nonnull)item;
@end


/**
  The theme of the whole TabsControl bar
*/
SWIFT_PROTOCOL("_TtP14KPCTabsControl16TabsControlTheme_")
@protocol TabsControlTheme
@property (nonatomic, readonly, strong) NSColor * _Nonnull backgroundColor;
@property (nonatomic, readonly, strong) NSColor * _Nonnull borderColor;
@end


/**
  The theme of a complete TabsControl
*/
SWIFT_PROTOCOL("_TtP14KPCTabsControl5Theme_")
@protocol Theme
@property (nonatomic, readonly, strong) id <TabButtonTheme> _Nonnull tabButtonTheme;
@property (nonatomic, readonly, strong) id <TabButtonTheme> _Nonnull selectedTabButtonTheme;
@property (nonatomic, readonly, strong) id <TabButtonTheme> _Nonnull unselectableTabButtonTheme;
@property (nonatomic, readonly, strong) id <TabsControlTheme> _Nonnull tabsControlTheme;
@end



SWIFT_CLASS("_TtC14KPCTabsControl19TitleEditorSettings")
@interface TitleEditorSettings : NSObject
- (nonnull instancetype)init:(NSColor * _Nonnull)textColor font:(NSFont * _Nonnull)font alignment:(NSTextAlignment)alignment OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, strong) NSColor * _Nonnull textColor;
@property (nonatomic, strong) NSFont * _Nonnull font;
@property (nonatomic) NSTextAlignment alignment;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

#pragma clang diagnostic pop
